{"version":3,"sources":["components/card/card.component.jsx","components/card-list/card-list.components.jsx","components/search-box/search-box.component.jsx","App.js","reportWebVitals.js","index.js"],"names":["Card","monster","className","src","id","alt","name","email","CardList","monsters","map","SearchBox","placeholder","handleChange","type","onChange","App","state","searchField","e","setState","target","value","fetch","then","respons","json","user","this","filterMonsters","filter","toLocaleLowerCase","includes","Component","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"yUAGaA,EAAO,SAAC,GAAiB,IAAfC,EAAc,EAAdA,QACrB,OACE,sBAAKC,UAAU,iBAAf,UACE,qBACEC,IAAG,+BAA0BF,EAAQG,GAAlC,iBACHC,IAAKJ,EAAQK,OAEf,6BAAKL,EAAQK,OACb,4BAAIL,EAAQM,YCPLC,EAAW,SAAC,GAAkB,IAAhBC,EAAe,EAAfA,SACzB,OACE,qBAAKP,UAAU,YAAf,SACGO,EAASC,KAAI,SAACT,GACb,OAAO,cAAC,EAAD,CAAuBA,QAASA,GAArBA,EAAQG,UCLrBO,G,MAAY,SAAC,GAAmC,IAAjCC,EAAgC,EAAhCA,YAAaC,EAAmB,EAAnBA,aACvC,OACE,uBACEC,KAAK,SACLZ,UAAU,SACVU,YAAaA,EACbG,SAAUF,MCuCDG,E,4MA1CbC,MAAQ,CACNR,SAAU,GACVS,YAAa,I,EAafL,aAAe,SAACM,GACd,EAAKC,SAAS,CACZF,YAAaC,EAAEE,OAAOC,S,uDAZ1B,WAAqB,IAAD,OAClBC,MAAM,8CACHC,MAAK,SAACC,GAAD,OAAaA,EAAQC,UAC1BF,MAAK,SAACG,GACL,EAAKP,SAAS,CACZX,SAAUkB,S,oBAWlB,WAAU,IAAD,EAC2BC,KAAKX,MAA/BR,EADD,EACCA,SAAUS,EADX,EACWA,YACZW,EAAiBpB,EAASqB,QAAO,SAACrB,GAAD,OACrCA,EAASH,KACNyB,oBACAC,SAASd,EAAYa,wBAG1B,OACE,sBAAK7B,UAAU,MAAf,UACE,kDACA,cAAC,EAAD,CACEU,YAAY,iBACZC,aAAce,KAAKf,eAErB,cAAC,EAAD,CAAUJ,SAAUoB,W,GArCVI,aCOHC,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,6BAAqBZ,MAAK,YAAkD,IAA/Ca,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOF,GACPG,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAQN,OCDdO,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,SAM1BZ,M","file":"static/js/main.45297a91.chunk.js","sourcesContent":["import React from \"react\";\nimport \"./card.styles.css\";\n\nexport const Card = ({ monster }) => {\n  return (\n    <div className=\"card-container\">\n      <img\n        src={`https://robohash.org/${monster.id}?size=180x180`}\n        alt={monster.name}\n      />\n      <h2>{monster.name}</h2>\n      <p>{monster.email}</p>\n    </div>\n  );\n};\n","import React from \"react\";\nimport \"./card-list.styles.css\";\nimport { Card } from \"../card/card.component\";\n\nexport const CardList = ({ monsters }) => {\n  return (\n    <div className=\"card-list\">\n      {monsters.map((monster) => {\n        return <Card key={monster.id} monster={monster} />;\n      })}\n    </div>\n  );\n};\n","import React from \"react\";\nimport \"./search-box.styles.css\";\n\nexport const SearchBox = ({ placeholder, handleChange }) => {\n  return (\n    <input\n      type=\"search\"\n      className=\"search\"\n      placeholder={placeholder}\n      onChange={handleChange}\n    />\n  );\n};\n","import \"./App.css\";\nimport { Component } from \"react\";\nimport { CardList } from \"./components/card-list/card-list.components\";\nimport { SearchBox } from \"./components/search-box/search-box.component\";\n\nclass App extends Component {\n  state = {\n    monsters: [],\n    searchField: \"\",\n  };\n\n  componentDidMount() {\n    fetch(\"https://jsonplaceholder.typicode.com/users\")\n      .then((respons) => respons.json())\n      .then((user) => {\n        this.setState({\n          monsters: user,\n        });\n      });\n  }\n\n  handleChange = (e) => {\n    this.setState({\n      searchField: e.target.value,\n    });\n  };\n\n  render() {\n    const { monsters, searchField } = this.state;\n    const filterMonsters = monsters.filter((monsters) =>\n      monsters.name\n        .toLocaleLowerCase()\n        .includes(searchField.toLocaleLowerCase())\n    );\n\n    return (\n      <div className=\"App\">\n        <h1>Monsters Rolodex</h1>\n        <SearchBox\n          placeholder=\"Search Monster\"\n          handleChange={this.handleChange}\n        />\n        <CardList monsters={filterMonsters} />\n      </div>\n    );\n  }\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}